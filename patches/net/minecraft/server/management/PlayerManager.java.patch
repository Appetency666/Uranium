--- ../src-base/minecraft/net/minecraft/server/management/PlayerManager.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerManager.java
@@ -1,13 +1,23 @@
 package net.minecraft.server.management;
 
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+//CraftBukkit start
+import java.util.Queue;
+import java.util.Set;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.Packet;
 import net.minecraft.network.play.server.S21PacketChunkData;
 import net.minecraft.network.play.server.S22PacketMultiBlockChange;
 import net.minecraft.network.play.server.S23PacketBlockChange;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.LongHashMap;
 import net.minecraft.util.MathHelper;
@@ -15,8 +25,6 @@
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class PlayerManager
 {
@@ -24,8 +32,13 @@
     private final WorldServer theWorldServer;
     private final List players = new ArrayList();
     private final LongHashMap playerInstances = new LongHashMap();
-    private final List chunkWatcherWithPlayers = new ArrayList();
-    private final List playerInstanceList = new ArrayList();
+    private final Queue chunkWatcherWithPlayers = new java.util.concurrent.ConcurrentLinkedQueue(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
+    private final Queue playerInstanceList = new java.util.concurrent.ConcurrentLinkedQueue(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
+    /**
+     * by cc<br>
+     * list to tick load chunk timer
+     */
+    private final Queue<PlayerInstance> mTickLoadList = new java.util.concurrent.ConcurrentLinkedQueue<PlayerInstance>();
     private int playerViewRadius;
     private long previousTotalWorldTime;
     private final int[][] xzDirectionsConst = new int[][] {{1, 0}, {0, 1}, { -1, 0}, {0, -1}};
@@ -37,6 +50,14 @@
         this.func_152622_a(p_i1176_1_.func_73046_m().getConfigurationManager().getViewDistance());
     }
 
+    // Cauldron start - vanilla compatibility
+    public PlayerManager(WorldServer p_i1176_1_, int viewDistance /* Spigot */)
+    {
+        this.theWorldServer = p_i1176_1_;
+        this.func_152622_a(viewDistance); // Spigot
+    }
+    // Cauldron end
+
     public WorldServer getWorldServer()
     {
         return this.theWorldServer;
@@ -45,33 +66,52 @@
     public void updatePlayerInstances()
     {
         long i = this.theWorldServer.getTotalWorldTime();
-        int j;
         PlayerManager.PlayerInstance playerinstance;
 
         if (i - this.previousTotalWorldTime > 8000L)
         {
             this.previousTotalWorldTime = i;
+            // CraftBukkit start - Use iterator
+            java.util.Iterator iterator = this.playerInstanceList.iterator();
 
-            for (j = 0; j < this.playerInstanceList.size(); ++j)
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.playerInstanceList.get(j);
+                playerinstance = (PlayerManager.PlayerInstance)iterator.next();
                 playerinstance.sendChunkUpdate();
                 playerinstance.processChunk();
             }
         }
         else
         {
-            for (j = 0; j < this.chunkWatcherWithPlayers.size(); ++j)
+            java.util.Iterator iterator = this.chunkWatcherWithPlayers.iterator();
+
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.chunkWatcherWithPlayers.get(j);
+                playerinstance = (PlayerManager.PlayerInstance)iterator.next();
                 playerinstance.sendChunkUpdate();
+                iterator.remove();
+                // CraftBukkit end
             }
         }
 
-        this.chunkWatcherWithPlayers.clear();
+        // cc delay load tick start
+        java.util.Iterator<PlayerInstance> tIt=this.mTickLoadList.iterator();
+        while(tIt.hasNext()){
+            if(tIt.next().loadTick()){
+                tIt.remove();
+            }
+        }
+        // cc delay load tick end
 
+        // this.chunkWatcherWithPlayers.clear(); // CraftBukkit - Removals are already covered
+
         if (this.players.isEmpty())
         {
+            if (this.theWorldServer.loadedEntityList.size() == 0 || this.theWorldServer.theChunkProviderServer.getLoadedChunkCount() == 0)
+            {
+                return; // CraftBukkit - Only do unload when we go from non-empty to empty
+            }
+
             WorldProvider worldprovider = this.theWorldServer.provider;
 
             if (!worldprovider.canRespawnHere())
@@ -102,6 +142,20 @@
         return playerinstance;
     }
 
+    // CraftBukkit start
+    public final boolean isChunkInUse(int x, int z)
+    {
+        PlayerManager.PlayerInstance pi = getOrCreateChunkWatcher(x, z, false);
+
+        if (pi != null)
+        {
+            return (pi.playersWatchingChunk.size() > 0);
+        }
+
+        return false;
+    }
+    // CraftBukkit end
+
     public void markBlockForUpdate(int p_151250_1_, int p_151250_2_, int p_151250_3_)
     {
         int l = p_151250_1_ >> 4;
@@ -353,13 +407,17 @@
         private int numberOfTilesToUpdate;
         private int flagsYAreasToUpdate;
         private long previousWorldTime;
-        private final java.util.HashMap<EntityPlayerMP, Runnable> players = new java.util.HashMap<EntityPlayerMP, Runnable>();
+        private final Set<EntityPlayerMP> players = Collections.synchronizedSet(new HashSet<EntityPlayerMP>());
         private boolean loaded = false;
+        private long mTickTime=0; // cc, delay to load chunk 
         private Runnable loadedRunnable = new Runnable()
         {
             public void run()
             {
                 PlayerInstance.this.loaded = true;
+                for(EntityPlayerMP sPlayer : players){
+                    sPlayer.loadedChunks.add(chunkLocation);
+                }
             }
         };
         private static final String __OBFID = "CL_00001435";
@@ -367,7 +425,8 @@
         public PlayerInstance(int p_i1518_2_, int p_i1518_3_)
         {
             this.chunkLocation = new ChunkCoordIntPair(p_i1518_2_, p_i1518_3_);
-            PlayerManager.this.theWorldServer.theChunkProviderServer.loadChunk(p_i1518_2_, p_i1518_3_, this.loadedRunnable);
+            this.loaded=PlayerManager.this.getWorldServer().chunkExists(p_i1518_2_,p_i1518_3_);
+            PlayerManager.this.mTickLoadList.add(this);
         }
 
         public void addPlayer(final EntityPlayerMP p_73255_1_)
@@ -384,26 +443,13 @@
                 }
 
                 this.playersWatchingChunk.add(p_73255_1_);
-                Runnable playerRunnable;
 
                 if (this.loaded)
                 {
-                    playerRunnable = null;
                     p_73255_1_.loadedChunks.add(this.chunkLocation);
                 }
-                else
-                {
-                    playerRunnable = new Runnable()
-                    {
-                        public void run()
-                        {
-                            p_73255_1_.loadedChunks.add(PlayerInstance.this.chunkLocation);
-                        }
-                    };
-                    PlayerManager.this.getWorldServer().theChunkProviderServer.loadChunk(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, playerRunnable);
-                }
 
-                this.players.put(p_73255_1_, playerRunnable);
+                this.players.add(p_73255_1_);
             }
         }
 
@@ -414,7 +460,6 @@
                 // If we haven't loaded yet don't load the chunk just so we can clean it up
                 if (!this.loaded)
                 {
-                    net.minecraftforge.common.chunkio.ChunkIOExecutor.dropQueuedChunkLoad(PlayerManager.this.getWorldServer(), this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, this.players.get(p_73252_1_));
                     this.playersWatchingChunk.remove(p_73252_1_);
                     this.players.remove(p_73252_1_);
 
@@ -541,7 +586,7 @@
                     {
                         i = this.chunkLocation.chunkXPos * 16;
                         j = this.chunkLocation.chunkZPos * 16;
-                        this.sendToAllPlayersWatchingChunk(new S21PacketChunkData(PlayerManager.this.theWorldServer.getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), false, this.flagsYAreasToUpdate));
+                        this.sendToAllPlayersWatchingChunk(new S21PacketChunkData(PlayerManager.this.theWorldServer.getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), (this.flagsYAreasToUpdate == 0xFFFF), this.flagsYAreasToUpdate)); // CraftBukkit - send everything (including biome) if all sections flagged
 
                         // Forge: Grabs ALL tile entities is costly on a modded server, only send needed ones
                         for (k = 0; false && k < 16; ++k)
@@ -596,5 +641,26 @@
                 }
             }
         }
+
+        /**
+         * Tick load Timer,load chunk if it's time
+         * 
+         * @return true if chunk ready to load or no player in,false otherwise
+         */
+        public boolean loadTick(){
+            if(this.players.isEmpty()) return true;
+
+            this.mTickTime++;
+            if(this.mTickTime>MinecraftServer.cauldronConfig.playerChunkLoadDelay.getValue()){
+                PlayerManager.this.theWorldServer.theChunkProviderServer.loadChunk(
+                        this.chunkLocation.chunkXPos,
+                        this.chunkLocation.chunkZPos,
+                        this.loadedRunnable
+                );
+                return true;
+            }
+            return false;
+        }
+        
     }
 }
